---
title: "accframe Rationales"
format:
  docx:
    output-file: "results_rationales_2024-06-18"
    output-ext:  "docx"
  pdf: 
    output-file: "results_rationales_2024-06-18"
    output-ext:  "pdf"
execute: 
  warning: false
  message: false
  echo: false
---

## Table: Decision Rationales

```{r, Setup}
#DVERSION_HONESTY <- "2024-05-24"
DVERSION_HONESTY <- "2024-06-17"
#DVERSION_HONESTY <- "2024-07-02"
#DVERSION_HONESTY <- "merged"

#DVERSION_TRUST <- "2024-05-25"
DVERSION_TRUST <- "2024-06-18"
#DVERSION_TRUST <- "2024-07-03"
#DVERSION_TRUST <- "merged"

#DVERSION_GIFTEX <- "2024-05-25"
DVERSION_GIFTEX <- "2024-06-18"
#DVERSION_GIFTEX <- "2024-07-02"
#DVERSION_GIFTEX <- "merged"

set.seed(123)

suppressPackageStartupMessages({
  library(tidyverse)
  library(fixest)
  library(modelsummary)
  library(ggbeeswarm)
  library(kableExtra)
})

create_test_row <- function(df, var) {
  rv <- t.test(pull(df[var]) ~ df$experiment)
  if ("mn_reason_truth" %in% names(df)) stat_sign = -1 else stat_sign = -1
  bind_cols(
    statistic = sprintf("t = %.3f", stat_sign*rv$statistic),
    pvalue = scales::pvalue(rv$p.value, accuracy = 0.001, add_p = TRUE)
  )
}

# tables add empty columns to ease c&p into word...
empty <- function(...) ""
```

### Panel A: Honesty Experiment

```{r}
hrounds <- read_csv(
  sprintf("../data/exp_runs/honesty_%s_rounds_classified.csv", DVERSION_HONESTY), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "fhonesty",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing")),
    reason_part = str_detect(tolower(reported_amount_reason), "participant"),
    reason_firm = str_detect(tolower(reported_amount_reason), "firm"),
    reason_other = reason_part + reason_firm,
    reason_payoff = 1*str_detect(tolower(reported_amount_reason), "payoff"),
  )

hparticipants <- read_csv(
  sprintf("../data/generated/honesty_%s_participants.csv", DVERSION_HONESTY), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "fhonesty",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing"))
  )

hpart <- hrounds %>%
  group_by(experiment, session_code, player_id) %>%
  summarise(
    mn_reason_other = mean(reason_other),
    mn_reason_payoff = mean(reason_payoff),
    mn_reason_self_payoff = mean(reason_self_payoff),
    mn_reason_other_payoff = mean(reason_other_payoff),
    mn_reason_truth = mean(reason_truth),
    .groups = "drop"
  ) %>% left_join(hparticipants, by = c("experiment", "session_code", "player_id")) 

tests <- bind_rows(lapply(
  c("mn_reason_payoff", "mn_reason_other", "mn_reason_self_payoff",
    "mn_reason_other_payoff", "mn_reason_truth"),
  function(x) create_test_row(hpart, x)
))

# ~ renders as nbsp; in Latex - neat. 
datasummary(
  (`Mentions Payoff` = mn_reason_payoff) +
  (`Mentions Other Participant` = mn_reason_other) + 
  (`Cares About Own Payoff` = mn_reason_self_payoff) + 
  (`Cares About Other Payoff` = mn_reason_other_payoff ) + 
  (`Cares About Honesty` = mn_reason_truth ) ~ 
    experiment*(N + Mean + SD + (`~` = empty)), 
  fmt = 3,
  add_columns = tests,
  data = hpart
)
```

{{< pagebreak >}}

### Panel B: Gift Exchange

```{r}
cost <- function(e) {
  case_when(
    e == 0.1 ~ 0,
    e == 0.2 ~ 1,
    e == 0.3 ~ 2,
    e == 0.4 ~ 4,
    e == 0.5 ~ 6,
    e == 0.6 ~ 8,
    e == 0.7 ~ 10,
    e == 0.8 ~ 12,
    e == 0.9 ~ 15,
    e == 1.0 ~ 28,
    TRUE ~ NA
  )
}

grounds <- read_csv(
  sprintf("../data/exp_runs/giftex_%s_rounds_classified.csv", DVERSION_GIFTEX), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "fgiftex",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing")),
    reason_wage_part = str_detect(tolower(wage_reason), "participant"),
    reason_wage_manager = str_detect(tolower(wage_reason), "manager"),
    reason_wage_other = reason_wage_part + reason_wage_manager,
    reason_wage_payoff = 1*str_detect(tolower(wage_reason), "payoff"),
    reason_effort_part = str_detect(tolower(effort_reason), "participant"),
    reason_effort_firm = str_detect(tolower(effort_reason), "firm"),
    reason_effort_other = reason_effort_part + reason_effort_firm,
    reason_effort_payoff = 1*str_detect(tolower(effort_reason), "payoff"),
)
gparticipants <- read_csv(
  sprintf("../data/generated/giftex_%s_participants.csv", DVERSION_GIFTEX), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "fgiftex",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing")),
  )

gdyads <- gparticipants %>%
  left_join(grounds, by = c("experiment", "session_code", "group_id")) %>%
  group_by(experiment, session_code, group_id) %>%
  summarise(
    mn_reason_wage_other = mean(reason_wage_other),
    mn_reason_wage_payoff = mean(reason_wage_payoff),
    mn_reason_effort_other = mean(reason_effort_other),
    mn_reason_effort_payoff = mean(reason_effort_payoff),
    mn_reason_wage_self_payoff = mean(reason_wage_self_payoff),
    mn_reason_wage_other_payoff = mean(reason_wage_other_payoff),
    mn_reason_wage_fairness = mean(reason_wage_fairness),
    mn_reason_wage_recip = mean(reason_wage_recip),
    mn_reason_effort_self_payoff = mean(reason_effort_self_payoff),
    mn_reason_effort_other_payoff = mean(reason_effort_other_payoff),
    mn_reason_effort_recip = mean(reason_effort_recip),
    .groups = "drop"
  )


tests <- bind_rows(lapply(
  c("mn_reason_wage_payoff", "mn_reason_wage_other", "mn_reason_wage_self_payoff",
    "mn_reason_wage_other_payoff", "mn_reason_wage_recip",
    "mn_reason_effort_payoff", "mn_reason_effort_other", "mn_reason_effort_self_payoff",
    "mn_reason_effort_other_payoff", "mn_reason_effort_recip"),
  function(x) create_test_row(gdyads, x)
))

row_heads <- c("Firm Decision (Wage)", "Manager Decision (Effort)")
group_rows <- bind_cols(tibble(row_heads), rep(list(c("", "")), 10))
attr(group_rows, 'position') <- c(1, 7)

datasummary(
  (`Mentions Payoff` = mn_reason_wage_payoff) +
  (`Mentions Other Participant` = mn_reason_wage_other) + 
  (`Cares About Own Payoff` = mn_reason_wage_self_payoff) + 
  (`Cares About Other Payoff` = mn_reason_wage_other_payoff ) + 
  (`Cares About Reciprocity` = mn_reason_wage_recip ) +
  (`Mentions Payoff` = mn_reason_effort_payoff) +
  (`Mentions Other Participant` = mn_reason_effort_other) + 
  (`Cares About Own Payoff` = mn_reason_effort_self_payoff) + 
  (`Cares About Other Payoff` = mn_reason_effort_other_payoff ) + 
  (`Cares About Reciprocity` = mn_reason_effort_recip ) ~ 
    experiment*(N + Mean + SD + (`~` = empty)), 
  fmt = 3,
  add_columns = tests,
  add_rows = group_rows,
  data = gdyads
)

```

{{< pagebreak >}}

### Panel C: Trust Exchange

```{r}
trounds <- read_csv(
  sprintf("../data/exp_runs/trust_%s_rounds_classified.csv", DVERSION_TRUST), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "ftrust",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing")),
    reason_sent_part = str_detect(tolower(sent_reason), "participant"),
    reason_sent_manager = str_detect(tolower(sent_reason), "manager"),
    reason_sent_other = reason_sent_part + reason_sent_manager,
    reason_sent_payoff = 1*str_detect(tolower(sent_reason), "payoff"),
    reason_back_part = str_detect(tolower(sent_back_reason), "participant"),
    reason_back_investor = str_detect(tolower(sent_back_reason), "investor"),
    reason_back_other = reason_back_part + reason_back_investor,
    reason_back_payoff = 1*str_detect(tolower(sent_back_reason), "payoff"),
  )

tparticipants <- read_csv(
  sprintf("../data/generated/trust_%s_participants.csv", DVERSION_TRUST), 
  show_col_types = FALSE
) %>%
  mutate(
    experiment = factor(ifelse(
      experiment == "ftrust",
      "Business Framing", "Neutral Framing"
    ), c("Neutral Framing", "Business Framing")),
    role = ifelse(role_in_group == 1, "Sender", "Receiver")
  )

tdyads <- tparticipants %>%
  left_join(trounds, by = c("experiment", "session_code", "group_id")) %>%
  group_by(experiment, session_code, group_id) %>%
  summarise(
    mn_reason_sent_other = mean(reason_sent_other),
    mn_reason_sent_payoff = mean(reason_sent_payoff),
    mn_reason_back_other = mean(reason_back_other),
    mn_reason_back_payoff = mean(reason_back_payoff),
    mn_reason_sent_self_payoff = mean(reason_sent_self_payoff),
    mn_reason_sent_other_payoff = mean(reason_sent_other_payoff),
    mn_reason_sent_trust = mean(reason_sent_trust),
    mn_reason_back_self_payoff = mean(reason_back_self_payoff),
    mn_reason_back_other_payoff = mean(reason_back_other_payoff),
    mn_reason_back_trust = mean(reason_back_trust),
    .groups = "drop"
  )


tests <- bind_rows(lapply(
  c("mn_reason_sent_payoff", "mn_reason_sent_other", "mn_reason_sent_self_payoff",
    "mn_reason_sent_other_payoff", "mn_reason_sent_trust",
    "mn_reason_back_payoff", "mn_reason_back_other", "mn_reason_back_self_payoff",
    "mn_reason_back_other_payoff", "mn_reason_back_trust"),
  function(x) create_test_row(tdyads, x)
))

row_heads <- c("Investor Decision (Investment)", "Manager Decision (Dividend)")
group_rows <- bind_cols(tibble(row_heads), rep(list(c("", "")), 10))
attr(group_rows, 'position') <- c(1, 7)

datasummary(
  (`Mentions Payoff` = mn_reason_sent_payoff) +
  (`Mentions Other Participant` = mn_reason_sent_other) + 
  (`Cares About Own Payoff` = mn_reason_sent_self_payoff) + 
  (`Cares About Other Payoff` = mn_reason_sent_other_payoff ) + 
  (`Cares About Trust` = mn_reason_sent_trust ) +
  (`Mentions Payoff` = mn_reason_back_payoff) +
  (`Mentions Other Participant` = mn_reason_back_other) + 
  (`Cares About Own Payoff` = mn_reason_back_self_payoff) + 
  (`Cares About Other Payoff` = mn_reason_back_other_payoff ) + 
  (`Cares About Trust` = mn_reason_back_trust ) ~ 
    experiment*(N + Mean + SD + (`~` = empty)), 
  fmt = 3,
  add_columns = tests,
  add_rows = group_rows,
  data = tdyads
)

```

{{< pagebreak >}}

## Table Examples

```{r}
get_quote2 <- function(df, cond, vars, rat) {
  df <- df %>% filter(experiment == cond)
  q1 <- df %>%
    filter(.data[[vars[1]]] == max(.data[[vars[1]]])) %>%
    mutate(other_vars = .data[[vars[2]]] + .data[[vars[3]]]) %>%
    filter(other_vars == min(other_vars)) %>%
    select(all_of(rat)) %>%
    pull()
  if (length(q1) > 1) q1 <- sample(q1, 1)
  q2 <- df %>%
    filter(.data[[vars[2]]] == max(.data[[vars[2]]])) %>%
    mutate(other_vars = .data[[vars[1]]] + .data[[vars[3]]]) %>%
    filter(other_vars == min(other_vars)) %>%
    select(all_of(rat)) %>%
    pull()
  if (length(q2) > 1) q2 <- sample(q2, 1)
  q3 <- df %>%
    filter(.data[[vars[3]]] == max(.data[[vars[3]]])) %>%
    mutate(other_vars = .data[[vars[1]]] + .data[[vars[2]]]) %>%
    filter(other_vars == min(other_vars)) %>%
    select(all_of(rat)) %>%
    pull()
  if (length(q3) > 1) q3 <- sample(q3, 1)
  sprintf('"%s"', c(q1, q2, q3))
}

get_quote <- function(df, cond, var, rat) {
  rquotes <- df %>%
    filter(experiment == cond) %>%
    filter(.data[[var]] == max(.data[[var]])) %>%
    select(all_of(rat)) %>%
    pull()
  if (length(rquotes) > 1) rquotes = sample(rquotes, 1)
  sprintf('"%s"', rquotes)
}

done <- FALSE
while (!done) {
  quote_exp_table <- c(
    "Panel A: Honesty Experiment",
    "Neutral Framing",
    get_quote2(
      hrounds, "Neutral Framing", 
      c("reason_self_payoff", "reason_other_payoff", "reason_truth"),
      "reported_amount_reason"
    ),
    "Business Framing",
    get_quote2(
      hrounds, "Business Framing", 
      c("reason_self_payoff", "reason_other_payoff", "reason_truth"),
      "reported_amount_reason"
    ),
    "Panel B: Gift Exchange Experiment",
    "Neutral Framing - Firm Decision (Wage)",
    get_quote2(
      grounds, "Neutral Framing", 
      c("reason_wage_self_payoff", "reason_wage_other_payoff", "reason_wage_recip"),
      "wage_reason"
    ),
    "Neutral Framing - Manager Decision (Effort)",
    get_quote2(
      grounds, "Neutral Framing", 
      c("reason_effort_self_payoff", "reason_effort_other_payoff", "reason_effort_recip"),
      "effort_reason"
    ),
    "Business Framing - Firm Decision (Wage)",
    get_quote2(
      grounds, "Business Framing", 
      c("reason_wage_self_payoff", "reason_wage_other_payoff", "reason_wage_recip"),
      "wage_reason"
    ),
    "Business Framing - Manager Decision (Effort)",
    get_quote2(
      grounds, "Business Framing", 
      c("reason_effort_self_payoff", "reason_effort_other_payoff", "reason_effort_recip"),
      "effort_reason"
    ),
    "Panel C: Trust Experiment",
    "Neutral Framing - Investor Decision (Investment)",
    get_quote2(
      trounds, "Neutral Framing", 
      c("reason_sent_self_payoff", "reason_sent_other_payoff", "reason_sent_trust"),
      "sent_reason"
    ),
    "Neutral Framing - Manager Decision (Dividend)",
    get_quote2(
      trounds, "Neutral Framing", 
      c("reason_back_self_payoff", "reason_back_other_payoff", "reason_back_trust"),
      "sent_back_reason"
    ),
    "Business Framing - Investor Decision (Investment)",
    get_quote2(
      trounds, "Business Framing", 
      c("reason_sent_self_payoff", "reason_sent_other_payoff", "reason_sent_trust"),
      "sent_reason"
    ),
    "Business Framing - Manager Decision (Dividend)",
    get_quote2(
      trounds, "Business Framing", 
      c("reason_back_self_payoff", "reason_back_other_payoff", "reason_back_trust"),
      "sent_back_reason"
    )
  )
  if (!anyDuplicated(quote_exp_table)) done <- TRUE   
} 

kable(quote_exp_table) 
```

